{"version":3,"file":"react-reactstrap-pagination.min.js","sources":["../src/PaginationComponent.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport memoize from 'memoize-one';\r\n\r\nclass PaginationComponent extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activePage: this.props.defaultActivePage\r\n    };\r\n  }\r\n\r\n  // Since we want to not have to worry about when this changes and since it won't change much\r\n  // Memoize will remember the last parameter and only execute when they change\r\n  getNumberOfPages = memoize(\r\n    props => {\r\n      const auxPages = props.totalItems / props.pageSize;\r\n      let pages = parseInt(auxPages, 10);\r\n      pages += pages !== auxPages ? 1 : 0;\r\n      return pages;\r\n    }\r\n  );\r\n\r\n  paginationItems = () => {\r\n\r\n    if (this.props.defaultActivePage !== this.defaultActivePage) {\r\n      this.defaultActivePage = this.props.defaultActivePage;\r\n      this.activePage = this.defaultActivePage;\r\n    }\r\n\r\n    const pages = this.getNumberOfPages(this.props);\r\n    let items = [];\r\n    const { activePage } = this;\r\n    const { firstPageText, previousPageText, nextPageText, lastPageText } = this.props;\r\n\r\n    // Since first and last PaginationNumber depend on activepage there's no reason to have them on the state\r\n    // So we just make the calculations when we need them\r\n    const firstPaginationNumber = this.getFirstPaginationNumber(activePage, pages);\r\n    const lastPaginationNumber = this.getLastPaginationNumber(firstPaginationNumber, pages);\r\n\r\n    // Elements first and previous\r\n    items.push(this.firstOrLastPagItem(firstPageText, 1));\r\n    items.push(this.nextOrPreviousPagItem(previousPageText, 1, \"l\"));\r\n\r\n    // Page numbers\r\n    for (let i = firstPaginationNumber; i <= lastPaginationNumber; i++) {\r\n      items.push(this.numberedPagItem(i, activePage));\r\n    }\r\n    // Elements next and last\r\n    items.push(this.nextOrPreviousPagItem(nextPageText, pages, \"r\"));\r\n    items.push(this.firstOrLastPagItem(lastPageText, pages));\r\n    return items;\r\n  };\r\n\r\n  getFirstPaginationNumber = (activePage, pages) => {\r\n    const distance = Math.floor(this.props.maxPaginationNumbers / 2);\r\n    const newFPNumber = activePage - distance;\r\n    const newLPNumber = activePage + distance;\r\n    let result = 1;\r\n    if (newFPNumber <= distance) {\r\n      result = 1;\r\n    } else if (newLPNumber <= pages) {\r\n      result = newFPNumber;\r\n    } else if (newLPNumber >= pages) {\r\n      result = pages - this.props.maxPaginationNumbers + 1;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  getLastPaginationNumber = (firstPaginationNumber, pages) => {\r\n    const minNumberPages = Math.min(\r\n      pages,\r\n      this.props.maxPaginationNumbers\r\n    );\r\n    return firstPaginationNumber + minNumberPages - 1;\r\n  };\r\n\r\n  numberedPagItem = (i, activePage) => {\r\n    let minWidth = \"43.5px\";\r\n    if (this.props.size === \"lg\") {\r\n      minWidth = \"71px\"\r\n    } else if (this.props.size === \"sm\") {\r\n      minWidth = \"33px\"\r\n    }\r\n    return (\r\n      <PaginationItem\r\n        key={i}\r\n        id={`pagebutton${i}`}\r\n        active={activePage === i}\r\n        onClick={this.handleClick}\r\n      >\r\n        <PaginationLink style={{ minWidth }}>{i}</PaginationLink>\r\n      </PaginationItem>\r\n    );\r\n  };\r\n\r\n  nextOrPreviousPagItem = (name, page, direction) => {\r\n    return (\r\n      <PaginationItem\r\n        key={name}\r\n        disabled={this.activePage === page}\r\n        onClick={e => this.handleSelectNextOrPrevious(direction)}\r\n      >\r\n        <PaginationLink>{name}</PaginationLink>\r\n      </PaginationItem>\r\n    );\r\n  };\r\n\r\n  firstOrLastPagItem = (name, page) => {\r\n    let event = {\r\n      currentTarget: {\r\n        getAttribute: () => `pagebutton${page}`\r\n      }\r\n    };\r\n    return (\r\n      <PaginationItem\r\n        key={name}\r\n        disabled={this.activePage === page}\r\n        onClick={() => this.handleClick(event)}\r\n      >\r\n        <PaginationLink>{name}</PaginationLink>\r\n      </PaginationItem>\r\n    );\r\n  };\r\n\r\n  handleClick = event => {\r\n    const newActivePage = parseInt(\r\n      event.currentTarget\r\n        .getAttribute(\"id\")\r\n        .split(\"pagebutton\")\r\n        .pop(),\r\n      10\r\n    );\r\n    this.changePaginationState(newActivePage);\r\n  };\r\n\r\n  handleSelectNextOrPrevious = direction => {\r\n    const { activePage, props } = this;\r\n    const pages = this.getNumberOfPages(props);\r\n    if (\r\n      (direction === \"r\" && activePage === pages) ||\r\n      (direction === \"l\" && activePage === 1)\r\n    )\r\n      return;\r\n\r\n    const newActivePage = direction === \"r\" ? activePage + 1 : activePage - 1;\r\n\r\n    this.changePaginationState(newActivePage);\r\n  };\r\n\r\n  changePaginationState = (newActivePage) => {\r\n    this.activePage = newActivePage;\r\n    this.setState({\r\n      activePage: newActivePage\r\n    });\r\n    this.props.onSelect(newActivePage);\r\n  }\r\n\r\n  render() {\r\n    return <Pagination size={this.props.size}>{this.paginationItems()}</Pagination>;\r\n  }\r\n}\r\n\r\nPaginationComponent.propTypes = {\r\n  totalItems: PropTypes.number.isRequired,\r\n  pageSize: PropTypes.number.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  maxPaginationNumbers: PropTypes.number,\r\n  defaultActivePage: PropTypes.number,\r\n  firstPageText: PropTypes.string,\r\n  previousPageText: PropTypes.string,\r\n  nextPageText: PropTypes.string,\r\n  lastPageText: PropTypes.string,\r\n  size: PropTypes.string\r\n};\r\n\r\nPaginationComponent.defaultProps = {\r\n  maxPaginationNumbers: 5,\r\n  defaultActivePage: 1,\r\n  firstPageText: \"First\",\r\n  previousPageText: \"Previous\",\r\n  nextPageText: \"Next\",\r\n  lastPageText: \"Last\"\r\n};\r\n\r\nexport default PaginationComponent;"],"names":["PaginationComponent","props","memoize","auxPages","totalItems","pageSize","pages","parseInt","_this","defaultActivePage","activePage","getNumberOfPages","items","firstPageText","previousPageText","nextPageText","lastPageText","firstPaginationNumber","getFirstPaginationNumber","lastPaginationNumber","getLastPaginationNumber","push","firstOrLastPagItem","nextOrPreviousPagItem","i","numberedPagItem","distance","Math","floor","maxPaginationNumbers","newFPNumber","newLPNumber","result","min","minWidth","size","React","PaginationItem","key","id","active","onClick","handleClick","PaginationLink","style","name","page","direction","disabled","e","handleSelectNextOrPrevious","event","currentTarget","getAttribute","newActivePage","split","pop","changePaginationState","setState","onSelect","state","Pagination","this","paginationItems","PureComponent","propTypes","PropTypes","number","isRequired","func","string","defaultProps"],"mappings":"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"}